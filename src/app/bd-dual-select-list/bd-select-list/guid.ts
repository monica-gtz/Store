

/**
 * Regex used to test if a string has anything except a 0 and a dash.
 */
const validGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

/**
 * Creates a new RFC4122 compliant random GUID.
 *
 * @returns {string}
 */
function newGuid(): string {
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

/**
 * Regex used to test if a string is a temporary guid generated by this utility.
 */
const tempGuidRegex = /^0{8}-0{4}-0{4}-[0-9a-f]{4}-[0-9a-f]{12}/i;

/**
 * Same as newGuid, although the first half of this GUID is populated by zeros.
 *
 * @returns {string}
 */
function tempGuid(): string {
    return s4(0) + s4(0) + '-' + s4(0) + '-' + s4(0) + '-' + s4() + '-' + s4() + s4() + s4();
}

/**
 * Checks the guid to see if it is a temporary one generated by this utility.
 */
function isTempGuid(guid: string): boolean {
    return tempGuidRegex.test(guid);
}

/**
 * Get default Guid.
 *
 * @returns {string}
 */
function defaultGuid(): string {
    return `${s4(0) + s4(0)}-${s4(0)}-${s4(0)}-${s4(0)}-${s4(0) + s4(0) + s4(0)}`;
}
/**
 * Checks the guid to see if it is the default (all zeros)
 *
 * @param {string} guid
 * @returns {boolean}
 */
function isDefault(guid: string): boolean {
    return Guid.equals(guid, defaultGuid());
}

/**
 * Checks the guid to see if the guid is valid
 *
 * @param {string} guid
 * @returns {boolean}
 */
function isGuid(guid: string): boolean {
    return validGuid.test(guid);
}

/**
 * Compares two GUIDs for equality (case-insensitive)
 * @param guid1 GUID 1
 * @param guid2 GUID 2
 * @returns {boolean} whether they are equal
 */
function equals(guid1: string, guid2: string): boolean {
    if (!guid1 || !guid2) {
        // can only compare valid guids
        return false;
    }

    return Guid.from(guid1) === Guid.from(guid2);
}

/**
 * Creates a standard {@link Guid} from a string.
 * @param guid
 */
function from(guid: string): string {
    return guid && guid.toLowerCase();
}

// Export a constant, so it works like C#'s static class.
export const Guid = {
    newGuid,
    tempGuid,
    isTempGuid,
    isDefault,
    isGuid,
    equals,
    defaultGuid,
    from
};


function s4(fillChar?: number | string): string {

    if (typeof fillChar !== 'undefined') {
        return Array(4).fill(fillChar).join('');
    }

    return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
}